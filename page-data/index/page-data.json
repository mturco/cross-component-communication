{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"f348204a-c679-526f-9f6e-8371dbd7143d","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar themes = [aspect, prism, custom];\nvar patterns = [{\n  title: 'App Level Contexts',\n  desc: 'Using context to provide common data at the application level'\n}, {\n  title: 'Compound Component Contexts',\n  desc: 'Using context to communicate between compound components'\n}, {\n  title: 'Refs with Instance Data',\n  desc: 'Attaching instance methods and properties to forwarded refs'\n}, {\n  title: 'Dispatch Contexts',\n  desc: 'Using context and useReducer for flux architecture'\n}];\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  themes: themes,\n  patterns: patterns,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"svg\", {\n    width: \"150\",\n    height: \"150\",\n    viewBox: \"0 0 167 155\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, mdx(\"path\", {\n    d: \"M90.169 41.094c-.743-.887-1.557-1.99-2.391-2.81-3.015-3.025-5.838-4.773-9.777-6.481-3.895-1.704-8.09-2.567-12.477-2.567-6.467 0-12.322 1.714-17.65 5.129-5.327 3.415-9.29 8.043-11.909 13.865L0 128.204 57.669 155l19.287-40.61c.75.941 1.586 2.175 2.463 3.035 3.015 3.025 5.685 4.561 9.684 6.255 4.034 1.728 8.242 2.575 12.669 2.575 6.423 0 12.208-1.748 17.334-5.278 5.143-3.509 9.085-8.181 11.909-14.002l35.895-79.927L109.483.356 90.169 41.094z\",\n    fill: \"#006dd4\",\n    fillRule: \"evenodd\"\n  })), mdx(\"h1\", null, \"Cross Component Communication\"), mdx(\"hr\", null), mdx(\"h1\", null, \"About Me\"), mdx(Name, {\n    mdxType: \"Name\"\n  }, \"Matt Turco\"), mdx(\"div\", null, \"Frontend Engineer at Namely\"), mdx(\"hr\", null), mdx(\"svg\", {\n    width: \"150\",\n    height: \"150\",\n    viewBox: \"0 0 167 155\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, mdx(\"path\", {\n    d: \"M90.169 41.094c-.743-.887-1.557-1.99-2.391-2.81-3.015-3.025-5.838-4.773-9.777-6.481-3.895-1.704-8.09-2.567-12.477-2.567-6.467 0-12.322 1.714-17.65 5.129-5.327 3.415-9.29 8.043-11.909 13.865L0 128.204 57.669 155l19.287-40.61c.75.941 1.586 2.175 2.463 3.035 3.015 3.025 5.685 4.561 9.684 6.255 4.034 1.728 8.242 2.575 12.669 2.575 6.423 0 12.208-1.748 17.334-5.278 5.143-3.509 9.085-8.181 11.909-14.002l35.895-79.927L109.483.356 90.169 41.094z\",\n    fill: \"#006dd4\",\n    fillRule: \"evenodd\"\n  })), mdx(\"h1\", null, \"Cross Component Communication\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Let's review our options\"), mdx(\"hr\", null), mdx(\"h2\", null, \"1. Props\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Greeting subject=\\\"World\\\" />\\n// \\u2193\\n<p>Hello, {subject}!</p>\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"2. Render Props\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// React Router\\n<Route path=\\\"/home\\\" render={() => <h1>Home</h1>} />\\n\\n// React PowerPlug\\n<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <Checkbox onClick={toggle} checked={on} />\\n  )}\\n</Toggle>\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"3. Refs\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const ref = useRef();\\n\\nuseEffect(() => {\\n  ref.current.focus();\\n}, []);\\n\\nreturn <Input ref={ref} />;\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"4. Context\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<ThemeContext.Provider value={theme}>\\n  ...\\n    <Button />\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const Button = props => {\\n  const theme = useContext(ThemeContext);\\n  return <button {...props} className={theme} />;\\n};\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"We have some good options\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Props\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Render Props\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Refs\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Context\")), mdx(\"p\", null, \"...but sometimes things still get messy\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Useful Patterns\"), mdx(Patterns, {\n    active: 1,\n    patterns: patterns,\n    mdxType: \"Patterns\"\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"Problem: Prop drilling\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<App userName=\\\"Toby Flenderson\\\" />\\n// \\u2193\\n<Dashboard userName={userName} />\\n// \\u2193\\n<DashboardHeader userName={userName} />\\n// \\u2193\\n<UserGreeting userName={userName} />\\n// \\u2193\\n<p>Welcome back, {userName}!</p>\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Solution: Use context\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const UserContext = React.createContext(null);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<UserContext.Provider value={user}>\\n  <App>\\n    <Dashboard>\\n      <DashboardHeader>\\n        <UserGreeting />\\n        ...\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Solution: Use context (cont)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const UserGreeting = () => {\\n  const user = useContext(UserContext);\\n  return <p>Welcome back, {user.name}!</p>;\\n};\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Useful Patterns\"), mdx(Patterns, {\n    active: 2,\n    patterns: patterns,\n    mdxType: \"Patterns\"\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"Problem: Repeated props\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<RadioButton name=\\\"color\\\" value=\\\"red\\\" checked={color === 'red'} />\\n<RadioButton name=\\\"color\\\" value=\\\"green\\\" checked={color === 'green'} />\\n<RadioButton name=\\\"color\\\" value=\\\"blue\\\" checked={color === 'blue'} />\\n<RadioButton name=\\\"color\\\" value=\\\"yellow\\\" checked={color === 'yellow'} />\\n<RadioButton name=\\\"color\\\" value=\\\"purple\\\" checked={color === 'purple'} />\\n<RadioButton name=\\\"color\\\" value=\\\"orange\\\" checked={color === 'orange'} />\\n\")), mdx(\"p\", null, \"The only distinct data here is each radio's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Solution: RadioGroup component that uses context\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<RadioGroup name=\\\"color\\\" selectedValue={color}>\\n  <RadioButton value=\\\"red\\\" />\\n  <RadioButton value=\\\"green\\\" />\\n  <RadioButton value=\\\"blue\\\" />\\n  <RadioButton value=\\\"yellow\\\" />\\n  <RadioButton value=\\\"purple\\\" />\\n  <RadioButton value=\\\"orange\\\" />\\n</RadioGroup>\\n\")), mdx(\"p\", null, \"Now all common data is passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RadioGroup\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Solution: RadioGroup component that uses context (cont)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const RadioGroup = ({ children, name, selectedValue }) => {\\n  const context = useMemo(() => ({ name, selectedValue }), [\\n    name,\\n    selectedValue\\n  ]);\\n\\n  return (\\n    <RadioGroupContext.Provider value={context}>\\n      {children}\\n    </RadioGroupContext>\\n  );\\n};\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Solution: RadioGroup component that uses context (cont)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const RadioButton = ({ value }) => {\\n  const { name, selectedValue } = useContext(RadioGroupContext);\\n\\n  return (\\n    <input\\n      type=\\\"radio\\\"\\n      name={name}\\n      value={value}\\n      checked={value === selectedValue}\\n    />\\n  );\\n};\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Taking it a step further\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<SelectionGroup name=\\\"sizes\\\" selectedValue={sizes}>\\n  <Checkbox value=\\\"small\\\" />\\n  <Checkbox value=\\\"medium\\\" />\\n  <Checkbox value=\\\"large\\\" />\\n</SelectionGroup>\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Instead of this...\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Input name=\\\"firstName\\\" value={firstName}\\n  onChange={handleFirstNameChange} />\\n\\n<Input name=\\\"lastName\\\" value={lastName}\\n  onChange={handleLastNameChange} />\\n\\n<Input name=\\\"email\\\" value={email}\\n  onChange={handleEmailChange} />\\n\\n<Input name=\\\"password\\\" value={password}\\n  onChange={handlePasswordChange} />\\n\\n<Button onClick={registerUser}>Register</Button>\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"We can do this\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Form onSubmit={registerUser}>\\n  <Input name=\\\"firstName\\\" />\\n  <Input name=\\\"lastName\\\" />\\n  <Input name=\\\"email\\\" />\\n  <Input name=\\\"password\\\" />\\n  <Button type=\\\"submit\\\">Register</Button>\\n</Form>\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Useful Patterns\"), mdx(Patterns, {\n    active: 3,\n    patterns: patterns,\n    mdxType: \"Patterns\"\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"Problem: Data provided by render props has a limited scope\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Form>\\n  {({ values, handleChange }) => (\\n    <>\\n      <Input\\n        name=\\\"name\\\"\\n        value={values.name}\\n        onChange={handleChange}\\n      />\\n      <Input\\n        name=\\\"email\\\"\\n        value={values.email}\\n        onChange={handleChange}\\n      />\\n      <button type=\\\"submit\\\">Submit</button>\\n    </>\\n  )}\\n</Form>\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Problem: Data provided by render props has a limited scope (cont)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const AutoSaveForm = ({ saveToServer }) => {\\n  // Oops! We don't have access to `values` from here\\n  useTimeInterval(15000, () => saveToServer(values));\\n\\n  return (\\n    <Form>\\n      {({ values, handleChange }) => <>...</>}\\n    </Form>\\n  );\\n};\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Solution: Provide instance methods or properties using a ref\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const Form = forwardRef(({ children }, forwardedRef) => {\\n  const ref = useRef();\\n  const [values, setValues] = useState({});\\n\\n  useImperativeHandle(forwardedRef, () => ({\\n    element: ref.current,\\n    values\\n  }));\\n\\n  return (\\n    <form ref={ref}>\\n      {children({ values, handleChange })}\\n    </form>\\n  );\\n});\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Solution: Provide instance methods or properties using a ref (cont)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const AutoSaveForm = ({ saveToServer }) => {\\n  const form = useRef();\\n\\n  useTimeInterval(15000, () =>\\n    saveToServer(form.current.values)\\n  );\\n\\n  return (\\n    <Form ref={form}>\\n      {({ values, handleChange }) => <>...</>}\\n    </Form>\\n  );\\n};\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Useful Patterns\"), mdx(Patterns, {\n    active: 4,\n    patterns: patterns,\n    mdxType: \"Patterns\"\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"Problem: Complex compound component with a lot of intercommunication\"), mdx(FiltersScreenshots, {\n    mdxType: \"FiltersScreenshots\"\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"Solution: Use context to pass a dispatch function\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const Filters = () => {\\n  const [state, dispatch] = useReducer(filtersReducer);\\n\\n  return (\\n    <FiltersContext.Provider value={dispatch}>\\n      ...\\n    </FiltersContext.Provider>\\n  );\\n};\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Solution: Use context to pass a dispatch function (cont)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const FiltersToggle = () => {\\n  const dispatch = useContext(FiltersContext);\\n\\n  const handleClick = useCallback(\\n    () => dispatch({ type: 'TOGGLE_DROPDOWN' }),\\n    [dispatch]\\n  );\\n\\n  return <Button onClick={handleClick}>Filters</Button>;\\n};\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Useful Patterns\"), mdx(PatternsSummary, {\n    patterns: patterns,\n    mdxType: \"PatternsSummary\"\n  }), mdx(\"hr\", null), mdx(\"svg\", {\n    width: \"150\",\n    height: \"150\",\n    viewBox: \"0 0 167 155\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, mdx(\"path\", {\n    d: \"M90.169 41.094c-.743-.887-1.557-1.99-2.391-2.81-3.015-3.025-5.838-4.773-9.777-6.481-3.895-1.704-8.09-2.567-12.477-2.567-6.467 0-12.322 1.714-17.65 5.129-5.327 3.415-9.29 8.043-11.909 13.865L0 128.204 57.669 155l19.287-40.61c.75.941 1.586 2.175 2.463 3.035 3.015 3.025 5.685 4.561 9.684 6.255 4.034 1.728 8.242 2.575 12.669 2.575 6.423 0 12.208-1.748 17.334-5.278 5.143-3.509 9.085-8.181 11.909-14.002l35.895-79.927L109.483.356 90.169 41.094z\",\n    fill: \"#006dd4\",\n    fillRule: \"evenodd\"\n  })), mdx(\"h1\", null, \"Namely is hiring frontend engineers!\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.namely.com/careers/\"\n  }), \"namely.com/careers\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Questions\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"f348204a-c679-526f-9f6e-8371dbd7143d","slug":"","title":"Cross Component Communication"}}}